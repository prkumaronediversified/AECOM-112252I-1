/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:		Crestron Electronics, Inc.
System Name:
System Number:
Programmer:			PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Cisco Touch 10 Room Control Processor v1.0"
// #HINT ""
#DEFINE_CONSTANT	_maxWidgets			100
#DEFINE_CONSTANT	constTouchWait		1500	//15 seconds
// #CATEGORY "" 
#CATEGORY "20" // Conferencing
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#HELP_PDF_FILE "Cisco Touch 10 Room Control Processor Help.pdf"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE
/*#HELP_BEGIN
	this module handles all traffic from the Cisco. the init must be pulsed before anything
	work. expand the toControlModules output only as far as needed. at program start the module
	will check to see how many modules are connected by using the isignaldefined function.
	the check is performed starting at the last output and counting down until it finds a
	connected signal. commands from the control modules are sent out  to the Cisco
	immediately.
#HELP_END*/
/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#user_simplsharp_library "MAC Address"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	initialize;
BUFFER_INPUT	fromDevice[25000], fromControlModules[25000];

DIGITAL_OUTPUT	initializeComplete;
STRING_OUTPUT	toDevice, toControlModules[_maxWidgets];
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
MacAddress _macAddress;
INTEGER	init, widgetCount, iRegistered, widgetConnected[_maxWidgets];
STRING	widgetIds[_maxWidgets][250], actionId[250];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
function heartBeat()
{
	if(iRegistered = 0)
	{
		makestring(toDevice, "xCommand Peripherals Connect Type: ControlSystem ID: \x22%s\x22 HardwareInfo: \x22Crestron CP3\x22 SoftwareInfo: \x22v1.0\x22\n", _macAddress.getMacAddress());
	}
	else if(iRegistered = 1)
	{
		makestring(toDevice, "xCommand Peripherals HeartBeat ID: \x22%s\x22\n", _macAddress.getMacAddress());
	}
	wait(constTouchWait, wTouchWait)
	{
		heartBeat();
	}
}

function sendInitCommands()
{
	toDevice = "echo off\n";
	delay(10);
	toDevice = "xFeedback deregister Event/UserInterface/Extensions/Widget\n";
	delay(10);
	toDevice = "xFeedback register Event/UserInterface/Extensions/Event\n";
	delay(10);
}

function checkInitStatus()
{
	integer a, _emptyFound;
	_emptyFound = 0;
	for(a = 1 to widgetCount)
	{
		if((widgetConnected[a] = 1) && (len(widgetIds[a]) = 0))
		{
			_emptyFound = 1;
			break;
		}
	}
	if(_emptyFound = 1)
	{
		init = 0;
		initializeComplete = init;
	}
	else
	{
		init = 1;
		initializeComplete = init;
		sendInitCommands();
		heartBeat();
	}
}

function runInit()
{
	integer a;
	if(init = 0)
	{
		for(a = 1 to widgetCount)
		{
			if(widgetConnected[a] = 1)
			{
				makestring(toControlModules[a], "Send Name %d\n", a);
			}
		}
		_macAddress.initialize();
	}
	else if(init = 1)
	{
		sendInitCommands();
		for(a = 1 to widgetCount)
		{
			if(widgetConnected[a] = 1)
			{
				makestring(toControlModules[a], "Update Status %d\n", a);
			}
		}
	}
}

function processFromControlModules(string paramData)
{
	string tempCommand[50], tempWidgetId[250];
	integer tempModuleNumber;

	tempCommand = left(paramData, find("\x20", paramData));
	if(tempCommand = "Send ")
	{
		tempModuleNumber = atoi(paramData);
		if((widgetConnected[tempModuleNumber] = 1) && (len(widgetIds[tempModuleNumber]) = 0))
		{
			tempWidgetId = mid(paramData, find("\x22", paramData) + 1, len(paramData) - find("\x22", paramData) - 1);
			widgetIds[tempModuleNumber] = tempWidgetId;
			tempModuleNumber = 0;
			checkInitStatus();
		}
		else if((widgetConnected[tempModuleNumber] = 1) && (len(widgetIds[tempModuleNumber]) = 1))
		{
			toControlModules[tempModuleNumber] = "#error: multiple modules connected\x0D\x0A";
		}
	}
	else if(tempCommand = "#count ")
	{
		tempModuleNumber = atoi(paramData);
		widgetConnected[tempModuleNumber] = 1;
	}
	else
	{
		toDevice = paramData + "\x0D\x0A";
		delay(10);
	}
}

function processFromDevice(string paramData)
{
	string tempWidgetId[250], tempCommand[250], tempProcess[250];
	integer a, b, c, quoteMark1, colonMark;

	tempProcess = paramData;
	tempCommand = remove(" ", tempProcess);
	if(tempCommand = "*e ")
	{
		tempCommand = remove(" ", tempProcess);
		if(lower(tempCommand) = lower("UserInterface "))
		{
			tempCommand = remove(" ", tempProcess);
			if(lower(tempCommand) = lower("Extensions "))
			{
				tempCommand = remove(" ", tempProcess);
				if(lower(tempCommand) = lower("Event "))
				{
					quoteMark1 = find("\x22", tempProcess) + 1;
					colonMark = find(":", tempProcess, quoteMark1);
					if(colonMark = 0)
					{
						colonMark = find("\x22", tempProcess, quoteMark1);
					}
					tempWidgetId = mid(tempProcess, quoteMark1, colonMark - quoteMark1);
					for(a = 1 to widgetCount)
					{
						if(tempWidgetId = widgetIds[a])
						{
							toControlModules[a] = paramData + "\x0D\x0A";
							break;
						}
					}
				}
			}
		}
	}
	else if(tempCommand = "*r ")
	{
		tempCommand = remove(" ", tempProcess);
		if((lower(tempCommand) = lower("Login ")) && (lower(tempProcess) = lower("successful")))
		{
			runInit();
		}
		else if(lower(tempCommand) = lower("PeripheralsConnectResult "))
		{
			if(find(lower("(status=OK):"), lower(tempProcess)) > 0)
			{
				iRegistered = 1;
			}
			else if(find(lower("(status=Error):"), lower(tempProcess)) > 0)
			{
				iRegistered = 0;
			}
		}
		else if(lower(tempCommand) = lower("PeripheralsHeartBeatResult "))
		{
			if(find(lower("(status=Error):"), lower(tempProcess)) > 0)
			{
				iRegistered = 0;
			}
		}
	}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH initialize
{
	runInit();
}

threadsafe CHANGE fromControlModules
{
	string tempData[250];
	integer tempModuleNumber;
	while(1)
	{
		try
		{
			tempData = gather("\x0D\x0A", fromControlModules);
			tempData = left(tempData, len(tempData) - 2);
			processFromControlModules(tempData);
		}
		catch
		{
			generateusernotice("Cisco Touch 10 Room Control Processor: Error processing fromControlModules: %s", getexceptionmessage());
		}
	}
}

threadsafe change fromDevice
{
	string tempData[250];

	while(1)
	{	
		try
		{
			tempData = gather("\x0D\x0A", fromDevice);
			tempData = left(tempData, len(tempData) - 2);//trace("tempData = %s", tempData);
			if(len(tempData) > 0)
			{
				processFromDevice(tempData);
			}
		}
		catch
		{
			generateusernotice("Cisco Touch 10 Room Control Processor: Error processing fromDevice: %s", getexceptionmessage());
		}
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	integer a;
	WaitForInitializationComplete();
	init = 0;
	actionId = "";
	widgetCount = _maxWidgets;
	setarray(widgetIds, "");
	setarray(widgetConnected, 0);
	iRegistered = 1;
	for(a = _maxWidgets to 1 step -1)
	{
		if(issignaldefined(toControlModules[a]))
		{
			widgetCount = a;
			break;
		}
	}
	for(a = 1 to widgetCount)
	{
		makestring(toControlModules[a], "#count %d\x0D\x0A", a);
	}
	delay(200);
	if(initialize = 1)
	{
		runInit();
	}
	initializeComplete = init;
}
