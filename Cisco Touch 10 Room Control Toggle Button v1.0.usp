/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:		Crestron Electronics, Inc.
System Name:
System Number:
Programmer:			PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Cisco Touch 10 Room Control Toggle Button v1.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "20" // Conferencing
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#HELP_PDF_FILE "Cisco Touch 10 Room Control Toggle Button Help.pdf"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE
/*#HELP_BEGIN
	this module works with the toggle button widget.
#HELP_END*/
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	_skip_, buttonStateOn, buttonStateOff;
BUFFER_INPUT	fromProcessorModule[250];

DIGITAL_OUTPUT	_skip_, initialized, setButtonOn, setButtonoff, error;
STRING_OUTPUT	errorMessage, toProcessorModule;
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER	paramWidgetId[250];
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES paramWidgetId
	propValidUnits = unitString;
	propDefaultUnit = unitString;
	propDefaultValue = "widget_1";
	propShortDescription = "enter the widget id (this is case sensitive)";
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	initComplete;
STRING	actionId[250], actionValue[10], lastValue[10];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
function processFromProcessor(string paramData)
{
	string tempData[250], tempCommand[250];
	integer quoteMark1, startMark, endMark;
	tempData = paramData;
	tempCommand = remove(" ", tempData);
	if(tempCommand = "Send ")
	{
		makestring(toProcessorModule, "Send Name %d = \x22%s\x22\x0D\x0A", atoi(tempData), paramWidgetId);
		error = 0;
		errorMessage = "";
		initComplete = 1;
		initialized = initComplete;
		if(buttonStateOn = 1)
		{
			makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22on\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
		}
		else if(buttonStateOff = 1)
		{
			makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22off\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
		}
	}
	else if(tempCommand = "Update ")
	{
		if(buttonStateOn = 1)
		{
			makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22on\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
		}
		else if(buttonStateOff = 1)
		{
			makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22off\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
		}
	}
	else if(tempCommand = "#count ")
	{
		toProcessorModule = paramData;
	}
	else if(tempCommand = "#error: ")
	{
		initComplete = 0;
		initialized = initComplete;
		error = 1;
		errorMessage = left(tempData, len(tempData) - 2);
	}
	else if(tempCommand = "*e ")
	{
		tempCommand = remove(" ", tempData);
		if(lower(tempCommand) = lower("UserInterface "))
		{
			tempCommand = remove(" ", tempData);
			if(lower(tempCommand) = lower("Extensions "))
			{
				tempCommand = remove(" ", tempData);
				if(lower(tempCommand) = lower("Event "))
				{
					tempCommand = remove(" ", tempData);
					if(lower(tempCommand) = lower("Changed "))
					{
						actionId = mid(tempData, find("\x22", tempData) + 1, find(":", tempData, find("\x22", tempData)) - (find("\x22", tempData) + 1));trace("actionId = %s; paramWidgetId = %s", actionId, paramWidgetId);
						if(actionId = paramWidgetId)
						{
							quoteMark1 = find("\x22", tempData);
							startMark = find(":", tempData, quoteMark1) + 1;
							endMark = find("\x22", tempData, startMark);
							tempCommand = mid(tempData, startMark, endMark - startMark);trace("tempCommand = %s", tempCommand);
							if(lower(tempCommand) = lower("on"))
							{
								if((tempCommand <> lastValue) && (buttonStateOff = 1))
								{
									lastValue = tempCommand;
									pulse(10, setButtonOn);
								}
								else if(buttonStateOn = 1)
								{
									lastValue = tempCommand;
									makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22on\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
								}
								else
								{
									makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22off\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
								}
							}
							else if(lower(tempCommand) = lower("off"))
							{
								if((tempCommand <> lastValue) && (buttonStateOn = 1))
								{
									lastValue = tempCommand;
									pulse(10, setButtonOff);
								}
								else if(buttonStateOff = 1)
								{
									lastValue = tempCommand;
									makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22off\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
								}
								else
								{
									makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22on\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
								}
							}
						}
					}
				}
			}
		}
	}
	actionId = "";
	actionValue = "";
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH buttonStateOn
{
	if(initComplete = 1)
	{
		makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22on\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
		lastValue = "on";
	}
}

PUSH buttonStateOff
{
	if(initComplete = 1)
	{
		makestring(toProcessorModule, "xCommand UserInterface Extensions Widget SetValue Value: \x22off\x22 WidgetId: \x22%s\x22\n", paramWidgetId);
		lastValue = "off";
	}
}

threadsafe CHANGE fromProcessorModule
{
	string tempData[250];

	while(1)
	{
		try
		{
			tempData = gather("\x0D\x0A", fromProcessorModule);
			processFromProcessor(tempData);
		}
		catch
		{
			generateusernotice("Cisoc Touch 10 Room Control Toggle Button: Error processing fromProcessorModule: %s", getexceptionmessage());
		}
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	WaitForInitializationComplete();
	actionId = "";
	actionValue = "";
	lastValue = "";
	error = 0;
	errorMessage = "";
	initComplete = 0;
	initialized = initComplete;
}
